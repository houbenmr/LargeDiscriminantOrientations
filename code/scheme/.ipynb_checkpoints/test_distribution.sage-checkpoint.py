

# This file was *autogenerated* from the file test_distribution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x53d1c0debdc0c1ba3edd760148d21a078008f642a9f26f65995c4d86fc6efff7 = Integer(0x53d1c0debdc0c1ba3edd760148d21a078008f642a9f26f65995c4d86fc6efff7); _sage_const_13 = Integer(13); _sage_const_256 = Integer(256); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20)# Bruno Sterner prime for lambda = 256, Apr 14, 2025
p = _sage_const_0x53d1c0debdc0c1ba3edd760148d21a078008f642a9f26f65995c4d86fc6efff7 
r = _sage_const_13 
lmbda = _sage_const_256 

print('bitsize of p is', n(log(p,_sage_const_2 ),_sage_const_20 ))

from time import time
from parameters import setup

params = setup(p, r, generate = True, write = True, lmbda = lmbda)

import scheme as scheme
from scheme_cost import exps_to_B

scheme.params = params

B = exps_to_B(params.exps, lmbda)

print('using B =', B)

sk_alice, sk_bob = scheme.keygen(B), scheme.keygen(B)

print(sk_alice, sk_bob)

start = time()
pk_alice = scheme.group_action(scheme.params.base_cycle, sk_alice, B)
end = time()
print('Alice public key generation took time', end-start)
start = time()
pk_bob = scheme.group_action(scheme.params.base_cycle, sk_bob, B)
end = time()
print('Bob public key generation took time', end-start)
start = time()
ss_alice = scheme.group_action(pk_bob, sk_alice, B)
end = time()
print('Alice shared secret generation took time', end-start)
start = time()
ss_bob = scheme.group_action(pk_alice, sk_bob, B)
end = time()
print('Bob shared secret generation took time', end-start)

assert ss_alice == ss_bob

